"""
Esquemas de datos (modelos Pydant    film: str = Field(
        description="T√≠tulo de la pel√≠cula recomendada",
        examples=["The Shawshank Redemption"]
    )
    reason: str = Field(
        description="Explicaci√≥n algor√≠tmica de por qu√© se recomienda esta pel√≠cula",
        examples=["Popular en un g√©nero que has visto"]
    ) la API de recomendaciones.

Define todas las estructuras de datos de entrada y salida utilizadas
por los endpoints de la API, proporcionando validaci√≥n autom√°tica
y documentaci√≥n de la API.
"""

from pydantic import BaseModel, Field
from typing import List, Optional
from datetime import datetime

class StatusResponse(BaseModel):
    """
    ‚úÖ Respuesta del Health Check del servicio.
    
    Indica el estado operativo actual del sistema de recomendaciones
    junto con un timestamp preciso para sincronizaci√≥n.
    
    Attributes:
        status: Estado booleano del servicio (True = operativo)
        date: Timestamp UTC preciso en formato ISO 8601
    """
    status: bool = Field(
        description="üü¢ **Estado Operativo** - Indica si el servicio est√° funcionando correctamente",
        examples=[True, False]
    )
    date: datetime = Field(
        description="üïí **Timestamp UTC** - Momento exacto de la respuesta en formato ISO 8601",
        examples=["2025-01-14T10:30:00.123456Z", "2025-01-14T15:45:30.789012Z"]
    )

class RecommendedMovie(BaseModel):
    """
    üé¨ Pel√≠cula individual recomendada por el sistema.
    
    Representa una sola recomendaci√≥n de pel√≠cula con t√≠tulo
    y explicaci√≥n algor√≠tmica del motivo de la recomendaci√≥n.
    
    Attributes:
        film: T√≠tulo completo de la pel√≠cula recomendada
        reason: Explicaci√≥n t√©cnica y entendible del algoritmo usado
    """
    film: str = Field(
        description="üé≠ **T√≠tulo de la Pel√≠cula** - Nombre completo de la pel√≠cula recomendada",
        examples=[
            "The Shawshank Redemption",
            "Pulp Fiction", 
            "The Dark Knight",
            "Forrest Gump"
        ]
    )
    reason: str = Field(
        description="üß† **Explicaci√≥n Algor√≠tmica** - Motivo detallado de por qu√© se recomienda esta pel√≠cula",
        examples=[
            "Recomendada por categor√≠a: Drama",
            "Recomendada por actor: Tom Hanks",
            "Recomendaci√≥n ML: Alta similitud tem√°tica",
            "Recomendada por similitud textual: psychological, thriller"
        ]
    )

class WatchedMovieDetail(BaseModel):
    """
    üìä Detalles completos de pel√≠cula vista por el usuario.
    
    Contiene informaci√≥n integral sobre pel√≠culas del historial
    del usuario, utilizada para an√°lisis de preferencias y 
    generaci√≥n de recomendaciones personalizadas.
    
    Attributes:
        title: T√≠tulo oficial de la pel√≠cula
        rental_duration: Duraci√≥n est√°ndar del alquiler en d√≠as
        rental_rate: Precio de alquiler en moneda local
        fulltext: Contenido vectorizado para an√°lisis sem√°ntico
        actors: Lista de actores principales del reparto
    """
    title: str = Field(
        description="üé≠ **T√≠tulo de la Pel√≠cula** - Nombre oficial y completo",
        examples=["Inception", "The Matrix", "Pulp Fiction", "Interstellar"]
    )
    rental_duration: int = Field(
        description="üìÖ **Duraci√≥n del Alquiler** - D√≠as est√°ndar de alquiler",
        examples=[3, 5, 7],
        ge=1,
        le=30
    )
    rental_rate: float = Field(
        description="üí∞ **Precio de Alquiler** - Coste en moneda local",
        examples=[2.99, 4.99, 1.99, 3.49],
        ge=0,
        le=50.0
    )
    fulltext: str = Field(
        description="üîç **Contenido Fulltext** - Texto vectorizado para an√°lisis sem√°ntico PostgreSQL",
        examples=[
            "'action':1 'thriller':2 'sci-fi':1",
            "'drama':3 'family':1 'emotional':2",
            "'comedy':2 'romance':1 'light':1"
        ]
    )
    actors: List[str] = Field(
        description="üåü **Reparto Principal** - Lista de actores protagonistas",
        examples=[
            ["Leonardo DiCaprio", "Marion Cotillard"],
            ["Keanu Reeves", "Laurence Fishburne"],
            ["John Travolta", "Samuel L. Jackson"],
            ["Matthew McConaughey", "Anne Hathaway"]
        ]
    )

class RecommendationsResponse(BaseModel):
    """
    üìã Respuesta completa del sistema de recomendaciones.
    
    Estructura integral que incluye las recomendaciones generadas
    junto con el contexto completo del usuario para transparencia
    y explicabilidad del algoritmo.
    
    Attributes:
        user_id: Identificador del usuario objetivo
        focus: Algoritmo de recomendaci√≥n utilizado
        recommendations: Lista interna de IDs (legacy)
        watched_movies_details: Contexto del historial del usuario
        recommended_movies: Lista final de pel√≠culas recomendadas
    """
    user_id: int = Field(
        description="üÜî **ID del Usuario** - Identificador √∫nico del usuario objetivo",
        examples=[123, 456, 789],
        ge=1
    )
    focus: str = Field(
        description="üéØ **Algoritmo Utilizado** - Tipo de recomendaci√≥n aplicada",
        examples=["category", "actor", "language", "rating", "popularity", "fulltext"]
    )
    recommendations: List[str] = Field(
        description="üîß **IDs Internos** - Lista interna de identificadores (legacy)",
        examples=[["rec_1", "rec_2", "rec_3"], ["popular_1", "popular_2"]]
    )
    watched_movies_details: List[WatchedMovieDetail] = Field(
        description="üìö **Historial del Usuario** - Contexto detallado de pel√≠culas vistas",
        examples=[
            [],  # Usuario nuevo
            [{"title": "Inception", "rental_duration": 3, "rental_rate": 4.99}]  # Con historial
        ]
    )
    recommended_movies: List[RecommendedMovie] = Field(
        description="üé¨ **Recomendaciones Finales** - Lista de pel√≠culas sugeridas con explicaciones",
        examples=[
            [],  # Sin recomendaciones
            [{"film": "The Matrix", "reason": "Recomendada por categor√≠a: Sci-Fi"}]
        ]
    )

class RecommendedMovieML(BaseModel):
    """
    ü§ñ Recomendaci√≥n generada por Machine Learning.
    
    Modelo especializado para recomendaciones ML que incluye
    m√©tricas cuantificadas de similitud y explicaciones
    t√©cnicas del algoritmo utilizado.
    
    Attributes:
        film_id: ID de la pel√≠cula (null para fallbacks)
        title: T√≠tulo completo de la pel√≠cula
        similarity_score: Score de similitud sem√°ntica (0.0-1.0)
        explanation: Explicaci√≥n t√©cnica del algoritmo ML
    """
    film_id: Optional[int] = Field(
        description="üÜî **ID de Pel√≠cula** - Identificador √∫nico (null para fallback a popularidad)",
        examples=[123, 456, None],
        ge=1
    )
    title: str = Field(
        description="üé≠ **T√≠tulo de la Pel√≠cula** - Nombre completo de la pel√≠cula recomendada",
        examples=["The Matrix", "Blade Runner 2049", "Inception", "Interstellar"]
    )
    similarity_score: float = Field(
        description="üìä **Score de Similitud** - Puntuaci√≥n sem√°ntica entre 0.0 (sin similitud) y 1.0 (id√©ntico)",
        examples=[0.89, 0.76, 0.92, 0.0],
        ge=0.0,
        le=1.0
    )
    explanation: str = Field(
        description="üß† **Explicaci√≥n ML** - Descripci√≥n t√©cnica del algoritmo y motivo de la recomendaci√≥n",
        examples=[
            "Recomendaci√≥n ML: Alta similitud tem√°tica y estil√≠stica",
            "Recomendaci√≥n ML: Similitud en conceptos de IA y sci-fi",
            "Recomendaci√≥n por popularidad debido a pocas pel√≠culas vistas",
            "Recomendaci√≥n ML: Temas tecnol√≥gicos y narrativa reflexiva"
        ]
    )
