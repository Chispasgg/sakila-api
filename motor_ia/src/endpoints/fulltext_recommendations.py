"""
Endpoint de recomendaciones basadas en an√°lisis de texto completo (fulltext).

Utiliza el campo 'fulltext' de PostgreSQL para analizar patrones sem√°nticos
en las descripciones de pel√≠culas vistas por el usuario y generar recomendaciones
basadas en similitud de contenido textual.

Algoritmo:
1. Extrae datos fulltext de pel√≠culas vistas por el usuario
2. Analiza y agrega preferencias por palabras clave
3. Busca pel√≠culas con palabras clave similares usando ts_rank
4. Aplica diversificaci√≥n para evitar recomendaciones repetitivas
5. Retorna top 10 recomendaciones con explicaciones detalladas
"""

from fastapi import APIRouter, Depends, HTTPException, Query
from typing import List, Dict, Set
from src.schemas import RecommendationsResponse, RecommendedMovie, WatchedMovieDetail
from src.database.db_service import DatabaseService
from src.dependencies import get_db_service

router = APIRouter()

# Configuraci√≥n del algoritmo de diversificaci√≥n
MAX_RECOMMENDATIONS_PER_KEYWORD = 3
TOTAL_RECOMMENDATIONS_LIMIT = 10
CANDIDATE_EXPANSION_FACTOR = 5  # Buscar 5x m√°s candidatos para diversificar

@router.get(
    "/fulltext-recommendations",
    summary="üîç Recomendaciones por An√°lisis Sem√°ntico",
    description="""
    # üß† Motor de An√°lisis Textual Avanzado
    
    Sistema de recomendaciones que utiliza an√°lisis sem√°ntico profundo del contenido textual de las pel√≠culas.
    
    ## üéØ Tecnolog√≠a Utilizada
    
    | Componente | Tecnolog√≠a | Descripci√≥n |
    |------------|------------|-------------|
    | üîç **B√∫squeda Textual** | PostgreSQL Full-Text Search | ts_rank, tsvector, tsquery |
    | üßÆ **An√°lisis Sem√°ntico** | Procesamiento de lenguaje natural | Extracci√≥n de palabras clave |
    | üé≤ **Diversificaci√≥n** | Algoritmo personalizado | Evita recomendaciones mon√≥tonas |
    | ‚öñÔ∏è **Balanceado** | Distribuci√≥n inteligente | Max 3 por palabra clave |
    
    ## üîÑ Proceso de An√°lisis
    
    ```mermaid
    graph TD
        A[üë§ Usuario] --> B[üìä Extracci√≥n Fulltext]
        B --> C[üî§ An√°lisis Palabras Clave]
        C --> D[üîç B√∫squeda ts_rank]
        D --> E[üé≤ Diversificaci√≥n]
        E --> F[üìã Top 10 Balanceadas]
    ```
    
    ## üé¨ Tipos de An√°lisis
    
    ### üìù Descripci√≥n Textual
    - **Tramas y argumentos** de pel√≠culas vistas
    - **Temas recurrentes** identificados
    - **Estilos narrativos** preferidos
    
    ### üè∑Ô∏è Palabras Clave Extra√≠das
    - **G√©neros espec√≠ficos** (thriller psicol√≥gico, comedia rom√°ntica)
    - **Ambientaciones** (espacio, √©poca victoriana, futuro)
    - **Elementos tem√°ticos** (venganza, amistad, supervivencia)
    
    ## ‚ö° Configuraci√≥n del Algoritmo
    
    | Par√°metro | Valor | Prop√≥sito |
    |-----------|-------|-----------|
    | **Recomendaciones por palabra clave** | M√°x. 3 | Diversificaci√≥n tem√°tica |
    | **Total de recomendaciones** | 10 | Balance cantidad/calidad |
    | **Factor de expansi√≥n** | 5x | Amplitud de candidatos |
    
    ## üöÄ Ejemplo de Uso
    ```bash
    curl -X GET "https://api.recomendaciones.com/fulltext-recommendations?user_id=123" \\
         -H "accept: application/json"
    ```
    
    ## üí° Ventajas del Enfoque
    - ‚úÖ **Granularidad:** M√°s espec√≠fico que g√©neros o actores
    - ‚úÖ **Sem√°ntica:** Captura preferencias tem√°ticas sutiles  
    - ‚úÖ **Nativo:** Usa capacidades PostgreSQL optimizadas
    - ‚úÖ **Diverso:** Algoritmo anti-monoton√≠a integrado
    """,
    response_description="üé≠ Recomendaciones basadas en similitud sem√°ntica con diversificaci√≥n inteligente",
    response_model=RecommendationsResponse,
    responses={
        200: {
            "description": "‚úÖ **An√°lisis Completado** - Recomendaciones generadas por an√°lisis textual",
            "content": {
                "application/json": {
                    "examples": {
                        "analisis_exitoso": {
                            "summary": "üé¨ An√°lisis con diversificaci√≥n",
                            "value": {
                                "user_id": 123,
                                "focus": "fulltext",
                                "movies_watched": [
                                    "Inception (2010) - Sci-fi psychological thriller with complex narrative",
                                    "Memento (2000) - Neo-noir psychological thriller with memory themes"
                                ],
                                "recommendations": [
                                    {
                                        "title": "Shutter Island",
                                        "year": 2010,
                                        "reason": "Recomendada por similitud textual: psychological, thriller, complex"
                                    },
                                    {
                                        "title": "The Prestige",
                                        "year": 2006,
                                        "reason": "Recomendada por similitud textual: narrative, mystery, psychological"
                                    },
                                    {
                                        "title": "Donnie Darko",
                                        "year": 2001,
                                        "reason": "Recomendada por similitud textual: complex, psychological, sci-fi"
                                    }
                                ]
                            }
                        },
                        "usuario_nuevo": {
                            "summary": "üë§ Usuario sin historial",
                            "value": {
                                "user_id": 999,
                                "focus": "fulltext", 
                                "movies_watched": [],
                                "recommendations": [
                                    {
                                        "title": "The Shawshank Redemption",
                                        "year": 1994,
                                        "reason": "Recomendaci√≥n por popularidad (usuario sin historial textual)"
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        404: {
            "description": "‚ùå **Usuario No Encontrado** - El usuario no existe o no tiene datos",
            "content": {
                "application/json": {
                    "examples": {
                        "usuario_inexistente": {
                            "summary": "Usuario no registrado",
                            "value": {
                                "detail": "Usuario con ID 123 no encontrado"
                            }
                        },
                        "sin_datos_fulltext": {
                            "summary": "Sin datos de texto",
                            "value": {
                                "detail": "No hay datos de fulltext disponibles para el usuario 123"
                            }
                        }
                    }
                }
            }
        },
        500: {
            "description": "‚ùå **Error Interno** - Error en el an√°lisis textual o base de datos",
            "content": {
                "application/json": {
                    "examples": {
                        "error_analisis": {
                            "summary": "Error en an√°lisis sem√°ntico",
                            "value": {
                                "detail": "Error en el an√°lisis de texto completo: syntax error in tsquery"
                            }
                        },
                        "error_bd": {
                            "summary": "Error de base de datos",
                            "value": {
                                "detail": "Error interno del servidor: connection timeout"
                            }
                        }
                    }
                }
            }
        }
    },
    tags=["üîç An√°lisis Textual"],
    operation_id="get_fulltext_recommendations"
)
def get_fulltext_recommendations(
    user_id: int = Query(
        ...,
        description="üÜî **ID del Usuario** - Identificador para an√°lisis sem√°ntico personalizado",
        examples=[123, 456, 789],
        ge=1,
        title="User ID",
        alias="user_id"
    ),
    db_service: DatabaseService = Depends(get_db_service)
) -> RecommendationsResponse:
    """
    Genera recomendaciones basadas en an√°lisis de texto completo.
    
    Args:
        user_id: Identificador √∫nico del usuario
        db_service: Servicio de base de datos inyectado
        
    Returns:
        RecommendationsResponse: Recomendaciones con an√°lisis textual
        
    Raises:
        HTTPException: Si hay errores en el procesamiento o BD
    """
    try:
        # Obtener contexto del usuario
        watched_movies_details = db_service.get_film_details_for_customer(user_id)
        watched_movie_titles = [movie.get("title") for movie in watched_movies_details]
        
        if not watched_movies_details:
            return _create_empty_response(user_id, "Usuario no encontrado o sin historial")
        
        # An√°lisis de preferencias textuales
        fulltext_data = db_service.get_fulltext_data_for_customer(user_id)
        user_preferred_types = db_service.analyze_fulltext_preferences(fulltext_data)
        
        if not user_preferred_types:
            return _create_empty_response(user_id, "No hay suficientes datos de fulltext para generar recomendaciones")
        
        # Generar recomendaciones diversificadas
        recommended_movies = _generate_diversified_recommendations(
            db_service, user_preferred_types, watched_movie_titles
        )
        
        return RecommendationsResponse(
            user_id=user_id,
            focus="fulltext",
            recommendations=["Recomendaci√≥n basada en an√°lisis de texto completo"],
            watched_movies_details=watched_movies_details,
            recommended_movies=recommended_movies
        )
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error generando recomendaciones fulltext: {str(e)}"
        )

def _create_empty_response(user_id: int, reason: str) -> RecommendationsResponse:
    """
    Crea respuesta vac√≠a con mensaje explicativo.
    
    Args:
        user_id: ID del usuario
        reason: Motivo de la respuesta vac√≠a
        
    Returns:
        RecommendationsResponse con mensaje explicativo
    """
    return RecommendationsResponse(
        user_id=user_id,
        focus="fulltext",
        recommendations=["Sin recomendaciones disponibles"],
        watched_movies_details=[],
        recommended_movies=[RecommendedMovie(film="", reason=reason)]
    )

def _generate_diversified_recommendations(
    db_service: DatabaseService,
    user_preferred_types: Dict[str, int],
    watched_titles: List[str]
) -> List[RecommendedMovie]:
    """
    Genera recomendaciones diversificadas basadas en preferencias textuales.
    
    Aplica algoritmo de diversificaci√≥n para evitar que todas las recomendaciones
    sean del mismo tipo/g√©nero y proporcionar variedad al usuario.
    
    Args:
        db_service: Servicio de base de datos
        user_preferred_types: Palabras clave preferidas con puntajes
        watched_titles: T√≠tulos ya vistos (para exclusi√≥n)
        
    Returns:
        Lista diversificada de recomendaciones con explicaciones
    """
    # Expandir b√∫squeda para tener suficientes candidatos
    expanded_limit = TOTAL_RECOMMENDATIONS_LIMIT * CANDIDATE_EXPANSION_FACTOR
    potential_movies = db_service.get_movies_by_fulltext_affinity(
        user_preferred_types, watched_titles, limit=expanded_limit
    )
    
    if not potential_movies:
        return [RecommendedMovie(
            film="", 
            reason="No se encontraron pel√≠culas similares en la base de datos"
        )]
    
    # Aplicar algoritmo de diversificaci√≥n
    return _apply_diversification_algorithm(
        db_service, potential_movies, user_preferred_types
    )

def _apply_diversification_algorithm(
    db_service: DatabaseService,
    potential_movies: List[Dict[str, str]],
    user_preferred_types: Dict[str, int]
) -> List[RecommendedMovie]:
    """
    Aplica algoritmo de diversificaci√≥n para seleccionar recomendaciones variadas.
    
    Args:
        db_service: Servicio de base de datos
        potential_movies: Lista de pel√≠culas candidatas
        user_preferred_types: Preferencias del usuario por palabra clave
        
    Returns:
        Lista diversificada de recomendaciones
    """
    # Ordenar palabras clave por relevancia
    sorted_keywords = sorted(
        user_preferred_types.items(), 
        key=lambda x: x[1], 
        reverse=True
    )
    
    final_recommendations: List[RecommendedMovie] = []
    recommended_titles: Set[str] = set()
    keyword_counts: Dict[str, int] = {}
    
    # Iterar por palabras clave en orden de relevancia
    for keyword, score in sorted_keywords:
        if len(final_recommendations) >= TOTAL_RECOMMENDATIONS_LIMIT:
            break
            
        keyword_recommendations = _get_recommendations_for_keyword(
            db_service, potential_movies, keyword, recommended_titles, keyword_counts
        )
        
        final_recommendations.extend(keyword_recommendations)
        
        # Actualizar conjuntos de control
        for rec in keyword_recommendations:
            recommended_titles.add(rec.film)
            keyword_counts[keyword] = keyword_counts.get(keyword, 0) + 1
    
    return final_recommendations[:TOTAL_RECOMMENDATIONS_LIMIT]

def _get_recommendations_for_keyword(
    db_service: DatabaseService,
    potential_movies: List[Dict[str, str]],
    keyword: str,
    recommended_titles: Set[str],
    keyword_counts: Dict[str, int]
) -> List[RecommendedMovie]:
    """
    Obtiene recomendaciones para una palabra clave espec√≠fica.
    
    Args:
        db_service: Servicio de base de datos
        potential_movies: Pel√≠culas candidatas
        keyword: Palabra clave actual
        recommended_titles: T√≠tulos ya recomendados
        keyword_counts: Contador de recomendaciones por palabra clave
        
    Returns:
        Lista de recomendaciones para esta palabra clave
    """
    recommendations: List[RecommendedMovie] = []
    current_keyword_count = keyword_counts.get(keyword, 0)
    
    if current_keyword_count >= MAX_RECOMMENDATIONS_PER_KEYWORD:
        return recommendations
    
    for movie_data in potential_movies:
        if len(recommendations) >= MAX_RECOMMENDATIONS_PER_KEYWORD - current_keyword_count:
            break
            
        movie_title = movie_data["title"]
        movie_fulltext = movie_data["fulltext"]
        
        # Verificar si ya fue recomendada
        if movie_title in recommended_titles:
            continue
            
        # Verificar si la pel√≠cula contiene la palabra clave
        parsed_fulltext = db_service._parse_fulltext_string(movie_fulltext)
        if keyword in parsed_fulltext:
            recommendations.append(RecommendedMovie(
                film=movie_title,
                reason=f"Afinidad con el tema '{keyword}' (puntuaci√≥n: {parsed_fulltext[keyword]})"
            ))
    
    return recommendations
